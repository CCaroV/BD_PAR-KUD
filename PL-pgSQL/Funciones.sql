-- Función que crea una cadena de carácteres aleatoria dado un tamaño.
CREATE OR REPLACE FUNCTION PARQUEADERO.CLAVE_ALEATORIA_FU(
    IN TAMANIO_P INTEGER DEFAULT 10)
RETURNS TEXT
LANGUAGE PLPGSQL
AS $$
DECLARE
    -- Declaración de variables locales
    CHARS TEXT[] := '{0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z}';
    RESULT TEXT := '';
    I INTEGER := 0;
BEGIN
    -- Si el número ingresado es menor que cero, se cambia su signo
    IF TAMANIO_P < 0 THEN
        TAMANIO_P := TAMANIO_P * -1;
    END IF;
    -- Genera la clave aleatoria
    FOR I IN 1..TAMANIO_P LOOP
        RESULT := RESULT || CHARS[1 + RANDOM() * (ARRAY_LENGTH(CHARS, 1) - 1)];
    END LOOP;
    RETURN RESULT;
END;
$$;

COMMENT ON FUNCTION PARQUEADERO.CLAVE_ALEATORIA_FU IS E'Función que crea una cadena de carácteres aleatoria dado un tamaño.';

ALTER FUNCTION PARQUEADERO.CLAVE_ALEATORIA_FU(INTEGER) OWNER TO PARKUD_DB_ADMIN;

-- Función que devuelve el día de la semana con su respectivo nombre dada una fecha.
CREATE OR REPLACE FUNCTION PARQUEADERO.OBTENER_DIA_FECHA_FU(
    IN FECHA_P DATE)
RETURNS VARCHAR
LANGUAGE PLPGSQL
AS $$
DECLARE
    -- Declaración de variables locales
    NUM_DIA_SEMANA_L INTEGER;
BEGIN
    -- Devuelve el día de la semana dependiendo de la fecha de entrada
    SELECT
        EXTRACT(DOW FROM DATE(FECHA_P)) INTO NUM_DIA_SEMANA_L;
    IF NUM_DIA_SEMANA_L = 0 THEN
        RETURN 'Domingo';
    ELSIF NUM_DIA_SEMANA_L = 1 THEN
        RETURN 'Lunes';
    ELSIF NUM_DIA_SEMANA_L = 2 THEN
        RETURN 'Martes';
    ELSIF NUM_DIA_SEMANA_L = 3 THEN
        RETURN 'Miércoles';
    ELSIF NUM_DIA_SEMANA_L = 4 THEN
        RETURN 'Jueves';
    ELSIF NUM_DIA_SEMANA_L = 5 THEN
        RETURN 'Viernes';
    ELSIF NUM_DIA_SEMANA_L = 6 THEN
        RETURN 'Sábado';
    ELSE
        RETURN NULL;
    END IF;
END;
$$;

COMMENT ON FUNCTION PARQUEADERO.OBTENER_DIA_FECHA_FU IS E'Función que devuelve el día de la semana con su respectivo nombre dada una fecha.';

ALTER FUNCTION PARQUEADERO.OBTENER_DIA_FECHA_FU(DATE) OWNER TO PARKUD_DB_ADMIN;

-- Función para crear un cliente en la base de datos.
CREATE OR REPLACE FUNCTION PARQUEADERO.CREAR_CLIENTE_FU(
    IN TIPO_IDENTIFICACION_P PARQUEADERO.CLIENTE.TIPO_IDENTIFICACION_CLIENTE%TYPE,
    IN NUMERO_IDENTIFICACION_P PARQUEADERO.CLIENTE.NUMERO_IDENTIFICACION_CLIENTE%TYPE,
    IN NOMBRE1_CLIENTE_P PARQUEADERO.CLIENTE.NOMBRE1_CLIENTE%TYPE,
    IN NOMBRE2_CLIENTE_P PARQUEADERO.CLIENTE.NOMBRE2_CLIENTE%TYPE,
    IN APELLIDO1_CLIENTE_P PARQUEADERO.CLIENTE.APELLIDO1_CLIENTE%TYPE,
    IN APELLIDO2_CLIENTE_P PARQUEADERO.CLIENTE.APELLIDO2_CLIENTE%TYPE,
    IN TELEFONO_CLIENTE_P PARQUEADERO.CLIENTE.TELEFONO_CLIENTE%TYPE,
    IN CORREO_CLIENTE_P VARCHAR
)
RETURNS TEXT
LANGUAGE PLPGSQL
AS $$
DECLARE
    -- Declaración de variables locales
    CORREO_ENCRIPTADO_L BYTEA := PARQUEADERO.PGP_SYM_ENCRYPT(CORREO_CLIENTE_P::VARCHAR, 'AES_KEY'::VARCHAR);
    FECHA_CLAVE_L TIMESTAMP := '2000-01-01 00:00';
    CLAVE_ALEATORIA_L TEXT;
BEGIN
    -- Genera una clave aleatoria para el usuario nuevo
    SELECT PARQUEADERO.CLAVE_ALEATORIA_FU(8) INTO CLAVE_ALEATORIA_L;

    -- Crea el usuario en la base de datos con su rol correspondiente
    EXECUTE FORMAT('CREATE ROLE %I WITH LOGIN PASSWORD %L VALID UNTIL %L IN ROLE USER_ROLE', CORREO_CLIENTE_P, CLAVE_ALEATORIA_L, FECHA_CLAVE_L);

    -- Inserta los datos del cliente en la tabla Cliente de la BD
    INSERT INTO PARQUEADERO.CLIENTE(
        TIPO_IDENTIFICACION_CLIENTE,
        NUMERO_IDENTIFICACION_CLIENTE,
        NOMBRE1_CLIENTE,
        NOMBRE2_CLIENTE,
        APELLIDO1_CLIENTE,
        APELLIDO2_CLIENTE,
        TELEFONO_CLIENTE,
        CORREO_CLIENTE
    )
    VALUES (
        TIPO_IDENTIFICACION_P,
        NUMERO_IDENTIFICACION_P,
        NOMBRE1_CLIENTE_P,
        NOMBRE2_CLIENTE_P,
        APELLIDO1_CLIENTE_P,
        APELLIDO2_CLIENTE_P,
        TELEFONO_CLIENTE_P,
        CORREO_ENCRIPTADO_L
    );

    -- Devuelve la clave generada
    RETURN CLAVE_ALEATORIA_L;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE EXCEPTION 'CREAR_CLIENTE_FU ha ocurrido un error: %/%', SQLSTATE, SQLERRM;
END;
$$;

COMMENT ON FUNCTION PARQUEADERO.CREAR_CLIENTE_FU IS E'Procedimiento para crear un usuario en la base de datos, asignar una clave aleatoria e invalidar esa clave para así forzar al usuario que la cambie.';

ALTER FUNCTION PARQUEADERO.CREAR_CLIENTE_FU(
    CHARACTER VARYING,
    CHARACTER VARYING,
    CHARACTER VARYING,
    CHARACTER VARYING,
    CHARACTER VARYING,
    CHARACTER VARYING,
    NUMERIC,
    CHARACTER VARYING
) OWNER TO PARKUD_DB_ADMIN;

GRANT EXECUTE ON FUNCTION PARQUEADERO.CREAR_CLIENTE_FU TO MANAGE_ACCOUNT_USER;

-- Procedimiento para crear un operador en la BD.
CREATE OR REPLACE FUNCTION PARQUEADERO.CREAR_OPERADOR_FU(
    IN TIPO_IDENTIFICACION_P PARQUEADERO.EMPLEADO.TIPO_IDENTIFICACION_EMPLEADO%TYPE,
    IN NUMERO_IDENTIFICACION_P PARQUEADERO.EMPLEADO.NUMERO_IDENTIFICACION_EMP%TYPE,
    IN NOMBRE1_EMPLEADO_P PARQUEADERO.EMPLEADO.NOMBRE1_EMPLEADO%TYPE,
    IN NOMBRE2_EMPLEADO_P PARQUEADERO.EMPLEADO.NOMBRE2_EMPLEADO%TYPE,
    IN APELLIDO1_EMPLEADO_P PARQUEADERO.EMPLEADO.APELLIDO1_EMPLEADO%TYPE,
    IN APELLIDO2_CLIENTE_P PARQUEADERO.EMPLEADO.APELLIDO2_EMPLEADO%TYPE,
    IN TELEFONO_EMPLEADO_P PARQUEADERO.EMPLEADO.TELEFONO_EMPLEADO%TYPE,
    IN CORREO_EMPLEADO_P VARCHAR
)
RETURNS TEXT
LANGUAGE PLPGSQL
AS $$
DECLARE
    -- Declaración de variables locales
    CORREO_ENCRIPTADO_L BYTEA := PARQUEADERO.PGP_SYM_ENCRYPT(CORREO_EMPLEADO_P::VARCHAR, 'AES_KEY'::VARCHAR);
    CLAVE_ALEATORIA_L TEXT;
    K_EMPLEADO_L PARQUEADERO.EMPLEADO.K_EMPLEADO%TYPE;
BEGIN
    -- Genera una clave aleatoria.
    SELECT PARQUEADERO.CLAVE_ALEATORIA_FU(8) INTO CLAVE_ALEATORIA_L;

    -- Crea el usuario en la BD con la clave aleatoria
    EXECUTE FORMAT('CREATE ROLE %I WITH LOGIN PASSWORD %L IN ROLE OPERADOR_ROLE', CORREO_EMPLEADO_P, CLAVE_ALEATORIA_L);

    -- Inserta los datos del operador en la BD
    INSERT INTO PARQUEADERO.EMPLEADO(
        TIPO_IDENTIFICACION_EMPLEADO,
        NUMERO_IDENTIFICACION_EMP,
        NOMBRE1_EMPLEADO,
        NOMBRE2_EMPLEADO,
        APELLIDO1_EMPLEADO,
        APELLIDO2_EMPLEADO,
        TELEFONO_EMPLEADO,
        CORREO_EMPLEADO
    )
    VALUES (
        TIPO_IDENTIFICACION_P,
        NUMERO_IDENTIFICACION_P,
        NOMBRE1_EMPLEADO_P,
        NOMBRE2_EMPLEADO_P,
        APELLIDO1_EMPLEADO_P,
        APELLIDO2_CLIENTE_P,
        TELEFONO_EMPLEADO_P,
        CORREO_ENCRIPTADO_L
    )
    RETURNING K_EMPLEADO INTO K_EMPLEADO_L;

    -- Inserta el cargo del operador en la tabla ejerce de la BD
    INSERT INTO PARQUEADERO.EJERCE(
        K_EMPLEADO,
        K_NOMBRE_CARGO,
        FECHA_INICIO_CARGO,
        FECHA_FIN_CARGO,
        ES_CARGO_ACTIVO
    )
    VALUES (
        K_EMPLEADO_L,
        'Operador',
        CURRENT_TIMESTAMP AT TIME ZONE 'America/Bogota',
        NULL,
        TRUE
    );

    -- Retorna la clave del operador
    RETURN CLAVE_ALEATORIA_L;
EXCEPTION
    -- Excepciones
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE EXCEPTION 'CREAR_OPERADOR_FU ha ocurrido un error: %/%', SQLSTATE, SQLERRM;
END;
$$;

COMMENT ON FUNCTION PARQUEADERO.CREAR_OPERADOR_FU IS E'Función que crea un operador en la base de datos.';

ALTER FUNCTION PARQUEADERO.CREAR_OPERADOR_FU(
    CHARACTER VARYING,
    CHARACTER VARYING,
    CHARACTER VARYING,
    CHARACTER VARYING,
    CHARACTER VARYING,
    CHARACTER VARYING,
    NUMERIC,
    CHARACTER VARYING
) OWNER TO PARKUD_DB_ADMIN;

-- Procedimiento para crear un administrador en la BD.
CREATE OR REPLACE FUNCTION PARQUEADERO.CREAR_ADMIN_FU(
    IN TIPO_IDENTIFICACION_P PARQUEADERO.EMPLEADO.TIPO_IDENTIFICACION_EMPLEADO%TYPE,
    IN NUMERO_IDENTIFICACION_P PARQUEADERO.EMPLEADO.NUMERO_IDENTIFICACION_EMP%TYPE,
    IN NOMBRE1_EMPLEADO_P PARQUEADERO.EMPLEADO.NOMBRE1_EMPLEADO%TYPE,
    IN NOMBRE2_EMPLEADO_P PARQUEADERO.EMPLEADO.NOMBRE2_EMPLEADO%TYPE,
    IN APELLIDO1_EMPLEADO_P PARQUEADERO.EMPLEADO.APELLIDO1_EMPLEADO%TYPE,
    IN APELLIDO2_CLIENTE_P PARQUEADERO.EMPLEADO.APELLIDO2_EMPLEADO%TYPE,
    IN TELEFONO_EMPLEADO_P PARQUEADERO.EMPLEADO.TELEFONO_EMPLEADO%TYPE,
    IN CORREO_EMPLEADO_P VARCHAR
)
RETURNS TEXT
LANGUAGE PLPGSQL
AS $$
DECLARE
    -- Declaración de variables locales
    CORREO_ENCRIPTADO_L BYTEA := PARQUEADERO.PGP_SYM_ENCRYPT(CORREO_EMPLEADO_P::VARCHAR, 'AES_KEY'::VARCHAR);
    CLAVE_ALEATORIA_L TEXT;
    K_EMPLEADO_L PARQUEADERO.EMPLEADO.K_EMPLEADO%TYPE;
BEGIN
    -- Genera una clave aleatoria.
    SELECT PARQUEADERO.CLAVE_ALEATORIA_FU(8) INTO CLAVE_ALEATORIA_L;

    -- Crea el usuario en la BD con la clave aleatoria
    EXECUTE FORMAT('CREATE ROLE %I WITH LOGIN PASSWORD %L IN ROLE ADMIN_ROLE', CORREO_EMPLEADO_P, CLAVE_ALEATORIA_L);

    -- Inserta los datos del operador en la BD
    INSERT INTO PARQUEADERO.EMPLEADO(
        TIPO_IDENTIFICACION_EMPLEADO,
        NUMERO_IDENTIFICACION_EMP,
        NOMBRE1_EMPLEADO,
        NOMBRE2_EMPLEADO,
        APELLIDO1_EMPLEADO,
        APELLIDO2_EMPLEADO,
        TELEFONO_EMPLEADO,
        CORREO_EMPLEADO
    )
    VALUES (
        TIPO_IDENTIFICACION_P,
        NUMERO_IDENTIFICACION_P,
        NOMBRE1_EMPLEADO_P,
        NOMBRE2_EMPLEADO_P,
        APELLIDO1_EMPLEADO_P,
        APELLIDO2_CLIENTE_P,
        TELEFONO_EMPLEADO_P,
        CORREO_ENCRIPTADO_L
    )
    RETURNING K_EMPLEADO INTO K_EMPLEADO_L;

    -- Inserta el cargo del operador en la tabla ejerce de la BD
    INSERT INTO PARQUEADERO.EJERCE(
        K_EMPLEADO,
        K_NOMBRE_CARGO,
        FECHA_INICIO_CARGO,
        FECHA_FIN_CARGO,
        ES_CARGO_ACTIVO
    )
    VALUES (
        K_EMPLEADO_L,
        'Administrador',
        CURRENT_TIMESTAMP AT TIME ZONE 'America/Bogota',
        NULL,
        TRUE
    );
    
    -- Retorna la clave del operador
    RETURN CLAVE_ALEATORIA_L;
EXCEPTION
    -- Excepciones
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE EXCEPTION 'CREAR_ADMIN_FU ha ocurrido un error: %/%', SQLSTATE, SQLERRM;
END;
$$;

COMMENT ON FUNCTION PARQUEADERO.CREAR_ADMIN_FU IS E'Función que crea un operador en la base de datos.';

ALTER FUNCTION PARQUEADERO.CREAR_ADMIN_FU(
    CHARACTER VARYING,
    CHARACTER VARYING,
    CHARACTER VARYING,
    CHARACTER VARYING,
    CHARACTER VARYING,
    CHARACTER VARYING,
    NUMERIC,
    CHARACTER VARYING
) OWNER TO PARKUD_DB_ADMIN;

REVOKE EXECUTE ON FUNCTION PARQUEADERO.CREAR_ADMIN_FU FROM ADMIN_ROLE;

-- Función para mostrar los vehículos que un cliente tiene registrados.
CREATE OR REPLACE FUNCTION PARQUEADERO.MOSTRAR_VEHICULOS_CLIENTE_FU()
RETURNS JSON
LANGUAGE PLPGSQL
AS $$
DECLARE 
    -- Declaración de variables locales
    RESULTADO_L JSON;
    K_CLIENTE_L PARQUEADERO.CLIENTE.K_CLIENTE%TYPE;
BEGIN
    -- Recupera la clave primaria del cliente conectado a la BD
    SELECT K_CLIENTE INTO STRICT K_CLIENTE_L
    FROM PARQUEADERO.CLIENTE
    WHERE PARQUEADERO.PGP_SYM_DECRYPT(CORREO_CLIENTE, 'AES_KEY') = CURRENT_USER;

    -- Inserta en un JSON el resultado de la consulta
    SELECT JSON_AGG(ROW_TO_JSON(T)) INTO RESULTADO_L 
    FROM(
        -- Consulta que devuelve la información de todas las sucursales
        SELECT V.PLACA_VEHICULO "Placa",
            V.NOMBRE1_PROPIETARIO || ' ' || COALESCE(V.NOMBRE2_PROPIETARIO, '') || ' ' || V.APELLIDO1_PROPIETARIO || ' ' || COALESCE(V.APELLIDO2_PROPIETARIO, '') "Nombre propietario",
            V.TIPO_VEHICULO "Tipo vehículo",
            V.COLOR_VEHICULO "Color",
            V.K_MARCA_VEHICULO "Marca"
        FROM PARQUEADERO.CLIENTE C
            INNER JOIN PARQUEADERO.VEHICULO V ON C.K_CLIENTE = V.K_CLIENTE
            INNER JOIN PARQUEADERO.MARCA_VEHICULO MV ON V.K_MARCA_VEHICULO = MV.K_MARCA_VEHICULO
        WHERE C.K_CLIENTE = K_CLIENTE_L
    ) T;

    -- Devuelve un JSON con la información de la consulta
    RETURN RESULTADO_L;
EXCEPTION
    -- Excepciones
    WHEN NO_DATA_FOUND THEN
        ROLLBACK;
        RAISE EXCEPTION 'El usuario actual no está registrado como cliente, %/%', SQLSTATE, SQLERRM;
    WHEN TOO_MANY_ROWS THEN
        ROLLBACK;
        RAISE EXCEPTION 'Hay inconsistencias en la BD, tabla cliente: hay un correo repetido, %/%', SQLSTATE, SQLERRM;
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE EXCEPTION 'MOSTRAR_VEHICULOS_CLIENTE_FU ha ocurrido un error: %/%', SQLSTATE, SQLERRM;
END;
$$;

COMMENT ON FUNCTION PARQUEADERO.MOSTRAR_VEHICULOS_CLIENTE_FU IS E'Función para mostrar los vehículos que un cliente tiene registrados.';

ALTER FUNCTION PARQUEADERO.MOSTRAR_VEHICULOS_CLIENTE_FU() OWNER TO PARKUD_DB_ADMIN;

-- Función que muestra la información básica de todas las sucursales.
CREATE OR REPLACE FUNCTION PARQUEADERO.MOSTRAR_SUCURSALES_FU()
RETURNS JSON
LANGUAGE PLPGSQL
AS $$
DECLARE
    RESULTADO_L JSON;
    DIA_ACTUAL_L VARCHAR;
BEGIN
    -- Selecciona el día de la semana.
    SELECT PARQUEADERO.OBTENER_DIA_FECHA_FU((SELECT CURRENT_DATE)) INTO DIA_ACTUAL_L;

    -- Inserta en un JSON el resultado de la consulta
    SELECT JSON_AGG(ROW_TO_JSON(T)) INTO RESULTADO_L 
    FROM(
        -- Consulta que devuelve la información de todas las sucursales
        SELECT S.TIPO_SUCURSAL AS "Tipo parqueadero",
            S.NOMBRE_SUCURSAL AS "Nombre parqueadero",
            C.NOMBRE_CIUDAD AS "Ciudad",
            D.NOMBRE_DIRECCION || ', ' || D.EDIFICIO_DIRECCION AS "Dirección",
            COUNT(DISTINCT SP.K_SLOT_PARQUEADERO) - COUNT(DISTINCT R.K_RESERVA) AS "Disponibilidad",
            CASE 
                WHEN HS.HORA_ABIERTO_SUCURSAL IS NULL AND HS.ES_HORARIO_COMPLETO THEN 'Horario 24 horas'
                WHEN HS.HORA_ABIERTO_SUCURSAL IS NULL AND HS.ES_CERRADO_COMPLETO THEN 'Sucursal cerrada'
                WHEN HS.HORA_ABIERTO_SUCURSAL IS NOT NULL THEN HS.HORA_ABIERTO_SUCURSAL::VARCHAR
            END AS "Hora abierto",
            CASE 
                WHEN HS.HORA_CERRADO_SUCURSAL IS NULL AND HS.ES_HORARIO_COMPLETO THEN 'Horario 24 horas'
                WHEN HS.HORA_CERRADO_SUCURSAL IS NULL AND HS.ES_CERRADO_COMPLETO THEN 'Sucursal cerrada'
                WHEN HS.HORA_CERRADO_SUCURSAL IS NOT NULL THEN HS.HORA_CERRADO_SUCURSAL::VARCHAR
            END AS "Hora cerrado",
            CASE
                WHEN TM.VALOR_MINUTO_SUV != 0 THEN TM.VALOR_MINUTO_SUV::VARCHAR
                WHEN TM.VALOR_MINUTO_SUV = 0 THEN 'No aplica'
            END AS "Tarifa SUV",
            CASE
                WHEN TM.VALOR_MINUTO_AUTO != 0 THEN TM.VALOR_MINUTO_AUTO::VARCHAR
                WHEN TM.VALOR_MINUTO_AUTO = 0 THEN 'No aplica'
            END AS "Tarifa automóvil",
            CASE
                WHEN TM.VALOR_MINUTO_MOTO != 0 THEN TM.VALOR_MINUTO_MOTO::VARCHAR
                WHEN TM.VALOR_MINUTO_MOTO = 0 THEN 'No aplica'
            END AS "Tarifa motocicleta",
            CASE
                WHEN TM.ADICION_PARQ_CUBIERTO != 0 THEN TM.ADICION_PARQ_CUBIERTO::VARCHAR
                WHEN TM.ADICION_PARQ_CUBIERTO = 0 THEN 'Sin incremento'
            END AS "Incremento parq. cubierto"
        FROM PARQUEADERO.PAIS P 
            INNER JOIN PARQUEADERO.DEPARTAMENTO DP ON P.K_PAIS = DP.K_PAIS
            INNER JOIN PARQUEADERO.CIUDAD C ON DP.K_DEPARTAMENTO = C.K_DEPARTAMENTO
            INNER JOIN PARQUEADERO.DIRECCION D ON C.K_CIUDAD = D.K_CIUDAD
            INNER JOIN PARQUEADERO.SUCURSAL S ON D.K_DIRECCION = S.K_DIRECCION
            INNER JOIN PARQUEADERO.TARIFA_MINUTO TM ON S.K_SUCURSAL = TM.K_SUCURSAL
            INNER JOIN PARQUEADERO.SLOT_PARQUEADERO SP ON S.K_SUCURSAL = SP.K_SUCURSAL
            INNER JOIN PARQUEADERO.HORARIO_SUCURSAL HS ON S.K_SUCURSAL = HS.K_SUCURSAL
            INNER JOIN PARQUEADERO.DIA_SEMANA DS ON HS.K_DIA_SEMANA = DS.K_DIA_SEMANA
            LEFT JOIN (
                SELECT K_SLOT_PARQUEADERO,
                    K_SUCURSAL,
                    K_RESERVA
                FROM PARQUEADERO.RESERVA
                WHERE ESTA_ACTIVA = TRUE
            ) R ON SP.K_SLOT_PARQUEADERO = R.K_SLOT_PARQUEADERO
            AND SP.K_SUCURSAL = R.K_SUCURSAL
            AND S.K_SUCURSAL = R.K_SUCURSAL
        WHERE DS.K_DIA_SEMANA = DIA_ACTUAL_L
        GROUP BY S.TIPO_SUCURSAL,
            S.NOMBRE_SUCURSAL,
            C.NOMBRE_CIUDAD,
            D.NOMBRE_DIRECCION || ', ' || D.EDIFICIO_DIRECCION,
            HS.HORA_ABIERTO_SUCURSAL,
            HS.HORA_CERRADO_SUCURSAL,
            HS.ES_HORARIO_COMPLETO,
            HS.ES_CERRADO_COMPLETO,
            TM.VALOR_MINUTO_SUV,
            TM.VALOR_MINUTO_AUTO,
            TM.VALOR_MINUTO_MOTO,
            TM.ADICION_PARQ_CUBIERTO
    ) T;
    
    -- Devuelve un JSON con la información de la consulta
    RETURN RESULTADO_L;
EXCEPTION
    WHEN OTHERS THEN
        RAISE EXCEPTION 'MOSTRAR_SUCURSALES_FU ha ocurrido un error: %/%', SQLSTATE, SQLERRM;
END;
$$;

COMMENT ON FUNCTION PARQUEADERO.MOSTRAR_SUCURSALES_FU IS E'Función que muestra la información básica de todas las sucursales.';

ALTER FUNCTION PARQUEADERO.MOSTRAR_SUCURSALES_FU() OWNER TO PARKUD_DB_ADMIN;

-- Función que devuelve los vehículos de un cliente según el tipo de vehículo.
CREATE OR REPLACE FUNCTION PARQUEADERO.MOSTRAR_VEHICULOS_RESERVA_FU(
    IN TIPO_VEHICULO_P PARQUEADERO.VEHICULO.TIPO_VEHICULO%TYPE
)
RETURNS JSON
LANGUAGE PLPGSQL
AS $$
DECLARE
    -- Declaración de variables locales
    RESULTADO_L JSON;
    K_CLIENTE_L PARQUEADERO.CLIENTE.K_CLIENTE%TYPE;
BEGIN
    -- Recupera la clave primaria del cliente conectado a la BD
    SELECT K_CLIENTE INTO STRICT K_CLIENTE_L
    FROM PARQUEADERO.CLIENTE
    WHERE PARQUEADERO.PGP_SYM_DECRYPT(CORREO_CLIENTE, 'AES_KEY') = CURRENT_USER;

    -- Inserta en un JSON el resultado de la consukta
    SELECT JSON_AGG(ROW_TO_JSON(T)) INTO RESULTADO_L 
    -- Consulta que devuelve los vehículos de un cliente filtrado por el tipo de vehículo
    FROM(
        SELECT K_MARCA_VEHICULO ||' - '|| PLACA_VEHICULO "Vehículo"
        FROM PARQUEADERO.CLIENTE C
            INNER JOIN PARQUEADERO.VEHICULO V ON C.K_CLIENTE = V.K_CLIENTE
        WHERE V.TIPO_VEHICULO = TIPO_VEHICULO_P 
            AND C.K_CLIENTE = K_CLIENTE_L
    ) T;

    -- Devuelve el JSON con la información de la consulta
    RETURN RESULTADO_L;
EXCEPTION
    -- Excepciones
    WHEN NO_DATA_FOUND THEN
        ROLLBACK;
        RAISE EXCEPTION 'El usuario actual no está registrado como cliente, %/%', SQLSTATE, SQLERRM;
    WHEN TOO_MANY_ROWS THEN
        ROLLBACK;
        RAISE EXCEPTION 'Hay inconsistencias en la BD, tabla cliente: hay un correo repetido, %/%', SQLSTATE, SQLERRM;
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE EXCEPTION 'MOSTRAR_VEHICULOS_RESERVA_FU ha ocurrido un error: %/%', SQLSTATE, SQLERRM;
END;
$$;

COMMENT ON FUNCTION PARQUEADERO.MOSTRAR_VEHICULOS_RESERVA_FU IS E'Función que devuelve los vehículos de un cliente según el tipo de vehículo.';

ALTER FUNCTION PARQUEADERO.MOSTRAR_VEHICULOS_RESERVA_FU (CHARACTER VARYING) OWNER TO PARKUD_DB_ADMIN ;

-- Función que retorna información básica de sucursales dado unos parámetros de entrada.
CREATE OR REPLACE FUNCTION PARQUEADERO.MOSTRAR_INFO_BASICA_SUCURSAL_FU(
    IN TIPO_VEHICULO_P PARQUEADERO.VEHICULO.TIPO_VEHICULO%TYPE,
    IN CIUDAD_P PARQUEADERO.CIUDAD.NOMBRE_CIUDAD%TYPE DEFAULT NULL,
    IN ES_PARQ_CUBIERTO_P PARQUEADERO.SLOT_PARQUEADERO.ES_CUBIERTO%TYPE DEFAULT NULL,
    IN NOMBRE_SUCURSAL_P PARQUEADERO.SUCURSAL.NOMBRE_SUCURSAL%TYPE DEFAULT NULL
)
RETURNS JSON
LANGUAGE PLPGSQL
AS $$
DECLARE
    RESULTADO_L JSON;
BEGIN
    -- Inserta en un JSON el resultado de la consukta
    SELECT JSON_AGG(ROW_TO_JSON(T)) INTO RESULTADO_L 
    -- Consulta que devuelve la información de la sucursal dados los parámetros
    FROM(
        SELECT DISTINCT C.NOMBRE_CIUDAD "Ciudad",
            S.TIPO_SUCURSAL "Tipo sucursal",
            S.NOMBRE_SUCURSAL "Nombre sucursal"
        FROM PARQUEADERO.PAIS P 
            INNER JOIN PARQUEADERO.DEPARTAMENTO DP ON P.K_PAIS = DP.K_PAIS
            INNER JOIN PARQUEADERO.CIUDAD C ON DP.K_DEPARTAMENTO = C.K_DEPARTAMENTO
            INNER JOIN PARQUEADERO.DIRECCION D ON C.K_CIUDAD = D.K_CIUDAD
            INNER JOIN PARQUEADERO.SUCURSAL S ON D.K_DIRECCION = S.K_DIRECCION
            INNER JOIN PARQUEADERO.TARIFA_MINUTO TM ON S.K_SUCURSAL = TM.K_SUCURSAL
            INNER JOIN PARQUEADERO.SLOT_PARQUEADERO SP ON S.K_SUCURSAL = SP.K_SUCURSAL
            INNER JOIN PARQUEADERO.HORARIO_SUCURSAL HS ON S.K_SUCURSAL = HS.K_SUCURSAL
            INNER JOIN PARQUEADERO.DIA_SEMANA DS ON HS.K_DIA_SEMANA = DS.K_DIA_SEMANA
            LEFT JOIN (
                SELECT K_SLOT_PARQUEADERO,
                    K_SUCURSAL,
                    K_RESERVA
                FROM PARQUEADERO.RESERVA
                WHERE ESTA_ACTIVA
            ) R ON SP.K_SLOT_PARQUEADERO = R.K_SLOT_PARQUEADERO
            AND SP.K_SUCURSAL = R.K_SUCURSAL
            AND S.K_SUCURSAL = R.K_SUCURSAL
        WHERE SP.TIPO_PARQUEADERO = TIPO_VEHICULO_P
            AND (CIUDAD_P IS NULL OR C.NOMBRE_CIUDAD = CIUDAD_P)
            AND (ES_PARQ_CUBIERTO_P IS NULL OR SP.ES_CUBIERTO = ES_PARQ_CUBIERTO_P)
            AND (NOMBRE_SUCURSAL_P IS NULL OR S.NOMBRE_SUCURSAL = NOMBRE_SUCURSAL_P)
    ) T;

    -- Devuelve un JSON con la información de la consulta
    RETURN RESULTADO_L;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE EXCEPTION 'MOSTRAR_INFO_BASICA_SUCURSAL_FU ha ocurrido un error: %/%', SQLSTATE, SQLERRM;
END;
$$;

COMMENT ON FUNCTION PARQUEADERO.MOSTRAR_INFO_BASICA_SUCURSAL_FU IS E'Función que retorna información básica de sucursales dado unos parámetros de entrada.';

ALTER FUNCTION PARQUEADERO.MOSTRAR_INFO_BASICA_SUCURSAL_FU (
     CHARACTER VARYING, 
     CHARACTER VARYING, 
     BOOLEAN, 
     CHARACTER VARYING
) OWNER TO PARKUD_DB_ADMIN ;

-- Función que muestra la información de la sucursal en el último paso de reserva en la aplicación.
CREATE OR REPLACE FUNCTION PARQUEADERO.MOSTRAR_INFO_SUCURSAL_RESERVA_FU(
    IN CIUDAD_P PARQUEADERO.CIUDAD.NOMBRE_CIUDAD%TYPE,
    IN ES_PARQ_CUBIERTO_P PARQUEADERO.SLOT_PARQUEADERO.ES_CUBIERTO%TYPE,
    IN TIPO_PARQUEADERO_P PARQUEADERO.SLOT_PARQUEADERO.TIPO_PARQUEADERO%TYPE,
    IN NOMBRE_SUCURSAL_P PARQUEADERO.SUCURSAL.NOMBRE_SUCURSAL%TYPE
)
RETURNS JSON
LANGUAGE PLPGSQL
AS $$
DECLARE
    RESULTADO_L JSON;
    K_SUCURSAL_L PARQUEADERO.SUCURSAL.K_SUCURSAL%TYPE;
    ADICION_PARQ_CUBIERTO_L PARQUEADERO.TARIFA_MINUTO.ADICION_PARQ_CUBIERTO%TYPE;
BEGIN
    -- Inserta en un JSON el resultado de la consukta
    SELECT JSON_AGG(ROW_TO_JSON(T)) INTO RESULTADO_L 
    -- Consulta que devuelve la información de la sucursal dados los parámetros
    FROM(
        SELECT DISTINCT C.NOMBRE_CIUDAD "Ciudad",
            S.NOMBRE_SUCURSAL "Nombre sucursal",
            D.NOMBRE_DIRECCION "Dirección",
            CASE 
                WHEN TIPO_PARQUEADERO_P = 'SUV' THEN (TM.VALOR_MINUTO_SUV + TM.ADICION_PARQ_CUBIERTO)
                WHEN TIPO_PARQUEADERO_P = 'Automóvil' THEN (TM.VALOR_MINUTO_AUTO + TM.ADICION_PARQ_CUBIERTO)
                WHEN TIPO_PARQUEADERO_P = 'Moto' THEN (TM.VALOR_MINUTO_MOTO + TM.ADICION_PARQ_CUBIERTO)
            END AS "Tarifa minuto"
        FROM PARQUEADERO.PAIS P 
            INNER JOIN PARQUEADERO.DEPARTAMENTO DP ON P.K_PAIS = DP.K_PAIS
            INNER JOIN PARQUEADERO.CIUDAD C ON DP.K_DEPARTAMENTO = C.K_DEPARTAMENTO
            INNER JOIN PARQUEADERO.DIRECCION D ON C.K_CIUDAD = D.K_CIUDAD
            INNER JOIN PARQUEADERO.SUCURSAL S ON D.K_DIRECCION = S.K_DIRECCION
            INNER JOIN PARQUEADERO.TARIFA_MINUTO TM ON S.K_SUCURSAL = TM.K_SUCURSAL
            INNER JOIN PARQUEADERO.SLOT_PARQUEADERO SP ON S.K_SUCURSAL = SP.K_SUCURSAL
            INNER JOIN PARQUEADERO.HORARIO_SUCURSAL HS ON S.K_SUCURSAL = HS.K_SUCURSAL
            INNER JOIN PARQUEADERO.DIA_SEMANA DS ON HS.K_DIA_SEMANA = DS.K_DIA_SEMANA
            LEFT JOIN (
                SELECT K_SLOT_PARQUEADERO,
                    K_SUCURSAL,
                    K_RESERVA
                FROM PARQUEADERO.RESERVA
                WHERE ESTA_ACTIVA
            ) R ON SP.K_SLOT_PARQUEADERO = R.K_SLOT_PARQUEADERO
            AND SP.K_SUCURSAL = R.K_SUCURSAL
            AND S.K_SUCURSAL = R.K_SUCURSAL
        WHERE SP.TIPO_PARQUEADERO = TIPO_PARQUEADERO_P
            AND C.NOMBRE_CIUDAD = CIUDAD_P
            AND SP.ES_CUBIERTO = ES_PARQ_CUBIERTO_P
            AND S.NOMBRE_SUCURSAL = NOMBRE_SUCURSAL_P
        GROUP BY "Ciudad",
            "Nombre sucursal",
            "Dirección",
            "Tarifa minuto"
        HAVING (COUNT(DISTINCT SP.K_SLOT_PARQUEADERO) - COUNT(DISTINCT R.K_RESERVA)) > 0
    ) T;

    -- Devuelve un JSON con la información de la consulta
    RETURN RESULTADO_L;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE EXCEPTION 'MOSTRAR_INFO_SUCURSAL_RESERVA_FU ha ocurrido un error: %/%', SQLSTATE, SQLERRM;
END;
$$;

COMMENT ON FUNCTION PARQUEADERO.MOSTRAR_INFO_SUCURSAL_RESERVA_FU IS E'Función que muestra la información de la sucursal en el último paso de reserva en la aplicación.';

ALTER FUNCTION PARQUEADERO.MOSTRAR_INFO_SUCURSAL_RESERVA_FU(
    CHARACTER VARYING, 
    BOOLEAN, 
    CHARACTER VARYING, 
    CHARACTER VARYING
) OWNER TO PARKUD_DB_ADMIN;

-- Función que retorna la información de los métodos de pago de un cliente para pagar una reserva.
CREATE OR REPLACE FUNCTION PARQUEADERO.MOSTRAR_METODOS_PAGO_FU()
RETURNS JSON
LANGUAGE PLPGSQL
AS $$
DECLARE 
    -- Declaración de variables locales
    RESULTADO_L JSON;
    K_CLIENTE_L PARQUEADERO.CLIENTE.K_CLIENTE%TYPE;
BEGIN
    -- Recupera la clave primaria del cliente conectado a la BD
    SELECT K_CLIENTE INTO STRICT K_CLIENTE_L
    FROM PARQUEADERO.CLIENTE
    WHERE PARQUEADERO.PGP_SYM_DECRYPT(CORREO_CLIENTE, 'AES_KEY') = CURRENT_USER;

    -- Inserta en un JSON el resultado de la consukta
    SELECT JSON_AGG(ROW_TO_JSON(T)) INTO RESULTADO_L 
    -- Consulta que devuelve la información de pago del cliente
    FROM(
        SELECT PARQUEADERO.PGP_SYM_DECRYPT(T.TIPO_TARJETA, 'AES_KEY')  "Tipo tarjeta",
            PARQUEADERO.PGP_SYM_DECRYPT(T.ULTIMOS_CUATRO_DIGITOS, 'AES_KEY') "Últimos 4 dígitos",
            PARQUEADERO.PGP_SYM_DECRYPT(T.NOMBRE_DUENIO_TARJETA, 'AES_KEY') "Nombre",
            PARQUEADERO.PGP_SYM_DECRYPT(T.APELLIDO_DUENIO_TARJETA, 'AES_KEY') "Apellido"
        FROM PARQUEADERO.CLIENTE C
            INNER JOIN PARQUEADERO.TARJETA_PAGO T ON C.K_CLIENTE = T.K_CLIENTE
        WHERE C.K_CLIENTE = K_CLIENTE_L
    ) T;

    -- Devuelve un JSON con la información de la consulta
    RETURN RESULTADO_L;
EXCEPTION
    -- Excepciones
    WHEN NO_DATA_FOUND THEN
        ROLLBACK;
        RAISE EXCEPTION 'El usuario actual no está registrado como cliente, %/%', SQLSTATE, SQLERRM;
    WHEN TOO_MANY_ROWS THEN
        ROLLBACK;
        RAISE EXCEPTION 'Hay inconsistencias en la BD, tabla cliente: hay un correo repetido, %/%', SQLSTATE, SQLERRM;
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE EXCEPTION 'MOSTRAR_METODOS_PAGO_FU ha ocurrido un error: %/%', SQLSTATE, SQLERRM;
END;
$$;

COMMENT ON FUNCTION PARQUEADERO.MOSTRAR_METODOS_PAGO_FU IS E'Función que retorna la información de los métodos de pago de un cliente para pagar una reserva.';

ALTER FUNCTION PARQUEADERO.MOSTRAR_METODOS_PAGO_FU() OWNER TO PARKUD_DB_ADMIN;
