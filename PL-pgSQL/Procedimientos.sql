-- Procedimiento de auditoría para los usuarios que inician sesión en la BD.
CREATE OR REPLACE PROCEDURE AUDITORIA.AUDIT_INGRESO_USUARIO_PR()
LANGUAGE PLPGSQL
AS $$
DECLARE
    -- Declaración de variables locales
    ROL_USUARIO_L VARCHAR;
BEGIN
    -- Selecciona el rol del usuario que ingresó
    SELECT LOWER(TRIM(G.ROLNAME)) INTO STRICT ROL_USUARIO_L
    FROM PG_ROLES R
        JOIN PG_AUTH_MEMBERS M ON R.OID = M.MEMBER
        JOIN PG_ROLES G ON M.ROLEID = G.OID
    WHERE R.ROLNAME = CURRENT_USER;

    -- Si es un cliente
    IF ROL_USUARIO_L = LOWER(TRIM('USER_ROLE')) THEN
        INSERT INTO AUDITORIA.AUDIT_USUARIO (
            K_EMPLEADO,
            K_CLIENTE,
            NOMBRE_USUARIO,
            DIRECCION_IP,
            FECHA_AUDIT_USUARIO
        )
        VALUES (
            NULL,
            (SELECT K_CLIENTE FROM PARQUEADERO.CLIENTE WHERE PARQUEADERO.PGP_SYM_DECRYPT(CORREO_CLIENTE, 'AES_KEY') = CURRENT_USER),
            (SELECT USER),
            (SELECT INET_CLIENT_ADDR()),
            (SELECT CURRENT_TIMESTAMP AT TIME ZONE 'America/Bogota')
        );

    -- Si es un operador, administrador o súper administrador
    ELSIF ROL_USUARIO_L = LOWER(TRIM('OPERADOR_ROLE'))
            OR ROL_USUARIO_L = LOWER(TRIM('ADMIN_ROLE'))
            OR ROL_USUARIO_L = LOWER(TRIM('SUPER_ADMIN_ROLE')) THEN
        INSERT INTO AUDITORIA.AUDIT_USUARIO (
            K_EMPLEADO,
            K_CLIENTE,
            NOMBRE_USUARIO,
            DIRECCION_IP,
            FECHA_AUDIT_USUARIO
        )
        VALUES (
            (SELECT K_EMPLEADO FROM PARQUEADERO.EMPLEADO WHERE PARQUEADERO.PGP_SYM_DECRYPT(CORREO_EMPLEADO, 'AES_KEY') = CURRENT_USER),
            NULL,
            (SELECT USER),
            (SELECT INET_CLIENT_ADDR()),
            (SELECT CURRENT_TIMESTAMP AT TIME ZONE 'America/Bogota')
        );
    END IF;
EXCEPTION
    -- Excepciones
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE EXCEPTION 'AUDIT_INGRESO_USUARIO_PR ha ocurrido un error: %/%', SQLSTATE, SQLERRM;
END;
$$;

COMMENT ON PROCEDURE AUDITORIA.AUDIT_INGRESO_USUARIO_PR IS E'Procedimiento de auditoría para los usuarios que inician sesión en la BD.';

ALTER PROCEDURE AUDITORIA.AUDIT_INGRESO_USUARIO_PR() OWNER TO PARKUD_DB_ADMIN;

-- Procedimiento para insertar un vehículo
CREATE OR REPLACE PROCEDURE PARQUEADERO.AGREGAR_VEHICULO_PR(
    IN TIPO_VEHICULO_P PARQUEADERO.VEHICULO.TIPO_VEHICULO%TYPE,
    IN PLACA_P PARQUEADERO.VEHICULO.PLACA_VEHICULO%TYPE,
    IN NOMBRE_1_P PARQUEADERO.VEHICULO.NOMBRE1_PROPIETARIO%TYPE,
    IN NOMBRE_2_P PARQUEADERO.VEHICULO.NOMBRE2_PROPIETARIO%TYPE,
    IN APELLIDO_1_P PARQUEADERO.VEHICULO.APELLIDO1_PROPIETARIO%TYPE,
    IN APELLIDO_2_P PARQUEADERO.VEHICULO.APELLIDO2_PROPIETARIO%TYPE,
    IN MARCA_VEHICULO_P PARQUEADERO.VEHICULO.K_MARCA_VEHICULO%TYPE,
    IN COLOR_VEHICULO_P PARQUEADERO.VEHICULO.COLOR_VEHICULO%TYPE
)
LANGUAGE PLPGSQL
AS $$
DECLARE
    -- Declaración de variables locales
    K_CLIENTE_L PARQUEADERO.CLIENTE.K_CLIENTE%TYPE;
BEGIN
    -- Recupera la clave primaria del cliente conectado a la BD
    SELECT K_CLIENTE INTO STRICT K_CLIENTE_L
    FROM PARQUEADERO.CLIENTE
    WHERE PARQUEADERO.PGP_SYM_DECRYPT(CORREO_CLIENTE, 'AES_KEY') = CURRENT_USER;
    
    -- Inserta el vehículo en la tabla de vehículos de la BD
    INSERT INTO PARQUEADERO.VEHICULO(
        K_MARCA_VEHICULO,
        K_CLIENTE,
        PLACA_VEHICULO,
        NOMBRE1_PROPIETARIO,
        NOMBRE2_PROPIETARIO,
        APELLIDO1_PROPIETARIO,
        APELLIDO2_PROPIETARIO,
        TIPO_VEHICULO,
        COLOR_VEHICULO
    )
    VALUES (
        MARCA_VEHICULO_P,
        K_CLIENTE_L,
        PLACA_P,
        NOMBRE_1_P,
        NOMBRE_2_P,
        APELLIDO_1_P,
        APELLIDO_2_P,
        TIPO_VEHICULO_P,
        COLOR_VEHICULO_P
    );
EXCEPTION
    -- Excepciones
    WHEN NO_DATA_FOUND THEN
        ROLLBACK;
        RAISE EXCEPTION 'El usuario actual no está registrado como cliente, %/%', SQLSTATE, SQLERRM;
    WHEN TOO_MANY_ROWS THEN
        ROLLBACK;
        RAISE EXCEPTION 'Hay inconsistencias en la BD, tabla cliente: hay un correo repetido, %/%', SQLSTATE, SQLERRM;
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE EXCEPTION 'AGREGAR_VEHICULO_PR ha ocurrido un error: %/%', SQLSTATE, SQLERRM;
END;
$$;

COMMENT ON PROCEDURE PARQUEADERO.AGREGAR_VEHICULO_PR IS E'Procedimiento para insertar un vehículo.';

ALTER PROCEDURE PARQUEADERO.AGREGAR_VEHICULO_PR(
    IN CHARACTER VARYING,
    IN CHARACTER VARYING,
    IN CHARACTER VARYING,
    IN CHARACTER VARYING,
    IN CHARACTER VARYING,
    IN CHARACTER VARYING,
    IN CHARACTER VARYING,
    IN CHARACTER VARYING
) OWNER TO PARKUD_DB_ADMIN;

-- Procedimiento para insertar un método de pago.
CREATE OR REPLACE PROCEDURE PARQUEADERO.INSERTAR_METODO_PAGO_PR(
    IN NOMBRE_DUENIO_TARJETA_P VARCHAR,
    IN APELLIDO_DUENIO_TARJETA_P VARCHAR,
    IN NUMERO_TARJETA_P VARCHAR,
    IN ULTIMOS_CUATRO_DIGITOS_P VARCHAR,
    IN MES_VENCIMIENTO_P NUMERIC(2),
    IN ANIO_VENCIMIENTO_P NUMERIC(4),
    IN TIPO_TARJETA_P VARCHAR
)
LANGUAGE PLPGSQL
AS $$
DECLARE 
    -- Declaración de variables locales
    K_CLIENTE_L PARQUEADERO.CLIENTE.K_CLIENTE%TYPE;
BEGIN
    -- Recupera la clave primaria del cliente conectado a la BD
    SELECT K_CLIENTE INTO STRICT K_CLIENTE_L
    FROM PARQUEADERO.CLIENTE
    WHERE PARQUEADERO.PGP_SYM_DECRYPT(CORREO_CLIENTE, 'AES_KEY') = CURRENT_USER;

    -- Inserta la información de método de pago
    INSERT INTO PARQUEADERO.TARJETA_PAGO (
        K_CLIENTE,
        NOMBRE_DUENIO_TARJETA,
        APELLIDO_DUENIO_TARJETA,
        NUMERO_TARJETA,
        ULTIMOS_CUATRO_DIGITOS,
        MES_VENCIMIENTO,
        ANIO_VENCIMIENTO,
        TIPO_TARJETA
    ) VALUES (
        K_CLIENTE_L,
        (SELECT PARQUEADERO.PGP_SYM_ENCRYPT(NOMBRE_DUENIO_TARJETA_P::VARCHAR, 'AES_KEY'::VARCHAR)),
        (SELECT PARQUEADERO.PGP_SYM_ENCRYPT(APELLIDO_DUENIO_TARJETA_P::VARCHAR, 'AES_KEY'::VARCHAR)),
        (SELECT PARQUEADERO.PGP_SYM_ENCRYPT(NUMERO_TARJETA_P::VARCHAR, 'AES_KEY'::VARCHAR)),
        (SELECT PARQUEADERO.PGP_SYM_ENCRYPT(ULTIMOS_CUATRO_DIGITOS_P::VARCHAR, 'AES_KEY'::VARCHAR)),
        (SELECT PARQUEADERO.PGP_SYM_ENCRYPT(MES_VENCIMIENTO_P::VARCHAR, 'AES_KEY'::VARCHAR)),
        (SELECT PARQUEADERO.PGP_SYM_ENCRYPT(ANIO_VENCIMIENTO_P::VARCHAR, 'AES_KEY'::VARCHAR)),
        (SELECT PARQUEADERO.PGP_SYM_ENCRYPT(TIPO_TARJETA_P::VARCHAR, 'AES_KEY'::VARCHAR))
    );
EXCEPTION
    -- Excepciones
    WHEN NO_DATA_FOUND THEN
        ROLLBACK;
        RAISE EXCEPTION 'El usuario actual no está registrado como cliente, %/%', SQLSTATE, SQLERRM;
    WHEN TOO_MANY_ROWS THEN
        ROLLBACK;
        RAISE EXCEPTION 'Hay inconsistencias en la BD, tabla cliente: hay un correo repetido, %/%', SQLSTATE, SQLERRM;
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE EXCEPTION 'INSERTAR_METODO_PAGO_PR ha ocurrido un error: %/%', SQLSTATE, SQLERRM;
END;
$$;

COMMENT ON PROCEDURE PARQUEADERO.AGREGAR_VEHICULO_PR IS E'Procedimiento para insertar un método de pago.';

ALTER PROCEDURE PARQUEADERO.INSERTAR_METODO_PAGO_PR ( 
    CHARACTER VARYING, 
    CHARACTER VARYING, 
    CHARACTER VARYING, 
    CHARACTER VARYING, 
    NUMERIC, 
    NUMERIC, 
    CHARACTER VARYING
) OWNER TO PARKUD_DB_ADMIN;

-- Procedimiento para hacer el primer cambio de clave de un usuario (cliente).
CREATE OR REPLACE PROCEDURE PARQUEADERO.PRIMER_CAMBIO_CLAVE_PR(
    IN NOMBRE_USUARIO_P TEXT, 
    IN CLAVE_NUEVA_P TEXT)
LANGUAGE PLPGSQL
AS $$
DECLARE
    -- Declaración de variables locales
    FECHA_VALIDEZ_L CONSTANT DATE := '2050-01-01';
    FECHA_ACTUAL_L PG_USER.VALUNTIL%TYPE;
BEGIN
    -- Toma la fecha de validación de la clave actual del usuario de la BD.
    SELECT VALUNTIL INTO FECHA_ACTUAL_L
    FROM PG_USER
    WHERE VALUNTIL IS NOT NULL 
        AND PG_USER.USENAME = NOMBRE_USUARIO_P;

    -- Si la fecha de validación no ha sido modificada, hace el cambio de clave.
    -- Si la fecha de validación ha sido modificada, este no es el primer cambio de clave del usuario.
    IF FECHA_ACTUAL_L::TIMESTAMP != FECHA_VALIDEZ_L::TIMESTAMP THEN
        EXECUTE FORMAT('ALTER USER %I WITH PASSWORD %L ', NOMBRE_USUARIO_P, CLAVE_NUEVA_P);
        EXECUTE FORMAT('ALTER USER %I VALID UNTIL %L', NOMBRE_USUARIO_P, FECHA_VALIDEZ_L);
    ELSE 
        ROLLBACK;
        RAISE EXCEPTION 'El usuario ingresado ya ha hecho su primer cambio de clave.';
    END IF;
EXCEPTION
    -- Excepciones
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE EXCEPTION 'PRIMER_CAMBIO_CLAVE_PR ha ocurrido un error: %/%', SQLSTATE, SQLERRM;
END;
$$;

COMMENT ON PROCEDURE PARQUEADERO.PRIMER_CAMBIO_CLAVE_PR IS E'Procedimiento para hacer el primer cambio de clave de un usuario.';

ALTER PROCEDURE PARQUEADERO.PRIMER_CAMBIO_CLAVE_PR(
    IN TEXT, 
    IN TEXT
) OWNER TO PARKUD_DB_ADMIN;

GRANT EXECUTE ON PROCEDURE PARQUEADERO.PRIMER_CAMBIO_CLAVE_PR TO MANAGE_ACCOUNT_USER;

-- Procedimiento para hacer una reserva
CREATE OR REPLACE PROCEDURE PARQUEADERO.CREAR_RESERVA_PR(
    IN TIPO_VEHICULO_P PARQUEADERO.VEHICULO.TIPO_VEHICULO%TYPE,
    IN MARCA_PLACA_VEHICULO_P VARCHAR,
    IN ES_PARQ_CUBIERTO_P PARQUEADERO.SLOT_PARQUEADERO.ES_CUBIERTO%TYPE,
    IN CIUDAD_P PARQUEADERO.CIUDAD.NOMBRE_CIUDAD%TYPE,
    IN NOMBRE_SUCURSAL_P PARQUEADERO.SUCURSAL.NOMBRE_SUCURSAL%TYPE,
    IN DIRECCION_SUCURSAL_P PARQUEADERO.DIRECCION.NOMBRE_DIRECCION%TYPE,
    IN FECHA_RESERVA_P DATE,
    IN HORA_RESERVA_P TIME,
    IN ULTIMOS_CUATRO_DIGITOS_P VARCHAR(4),
    IN TIPO_TARJETA_P VARCHAR,
    IN NOMBRE_DUENIO_TARJETA_P VARCHAR,
    IN APELLIDO_DUENIO_TARJETA_P VARCHAR,
    IN PUNTOS_USADOS_P PARQUEADERO.RESERVA.PUNTOS_USADOS%TYPE DEFAULT 0
)
LANGUAGE PLPGSQL
AS $$
DECLARE
    -- Declaración de variables locales
    PLACA_VEHICULO_L PARQUEADERO.VEHICULO.PLACA_VEHICULO%TYPE;
    K_CLIENTE_L PARQUEADERO.CLIENTE.K_CLIENTE%TYPE;
    K_SUCURSAL_L PARQUEADERO.SUCURSAL.K_SUCURSAL%TYPE;
    K_SLOT_PARQUEADERO_L PARQUEADERO.SLOT_PARQUEADERO.K_SLOT_PARQUEADERO%TYPE;
    K_TARJETA_PAGO_L PARQUEADERO.TARJETA_PAGO.K_TARJETA_PAGO%TYPE;
    K_FIDELIZACION_L PARQUEADERO.FIDELIZACION_CLIENTE.K_FIDELIZACION%TYPE := NULL;
    DIA_RESERVA_L PARQUEADERO.DIA_SEMANA.K_DIA_SEMANA%TYPE;
    FECHA_INICIO_RESERVA_L PARQUEADERO.RESERVA.FECHA_RESERVA%TYPE := FECHA_RESERVA_P + HORA_RESERVA_P;
    K_RESERVA_L PARQUEADERO.RESERVA.K_RESERVA%TYPE;
BEGIN
    -- Selecciona la clave primaria del cliente conectado a la BD
    SELECT K_CLIENTE INTO STRICT K_CLIENTE_L
    FROM PARQUEADERO.CLIENTE
    WHERE PARQUEADERO.PGP_SYM_DECRYPT(CORREO_CLIENTE, 'AES_KEY') = CURRENT_USER;

    -- Selecciona el día de la semana en que se hará la reserva
    SELECT PARQUEADERO.OBTENER_DIA_FECHA_FU(FECHA_RESERVA_P) INTO DIA_RESERVA_L;

    -- Selecciona la placa del vehículo
    SELECT TRIM(REGEXP_REPLACE(MARCA_PLACA_VEHICULO_P, '^.* ', '')) INTO PLACA_VEHICULO_L;
    
    -- Selecciona la PK de la sucursal y el slot de parqueadero a utilizar.
    SELECT S.K_SUCURSAL,
        SP.K_SLOT_PARQUEADERO INTO K_SUCURSAL_L,
        K_SLOT_PARQUEADERO_L
    FROM PARQUEADERO.PAIS P
        INNER JOIN PARQUEADERO.DEPARTAMENTO DP ON P.K_PAIS = DP.K_PAIS
        INNER JOIN PARQUEADERO.CIUDAD C ON DP.K_DEPARTAMENTO = C.K_DEPARTAMENTO
        INNER JOIN PARQUEADERO.DIRECCION D ON C.K_CIUDAD = D.K_CIUDAD
        INNER JOIN PARQUEADERO.SUCURSAL S ON D.K_DIRECCION = S.K_DIRECCION
        INNER JOIN PARQUEADERO.TARIFA_MINUTO TM ON S.K_SUCURSAL = TM.K_SUCURSAL
        INNER JOIN PARQUEADERO.SLOT_PARQUEADERO SP ON S.K_SUCURSAL = SP.K_SUCURSAL
        INNER JOIN PARQUEADERO.HORARIO_SUCURSAL HS ON S.K_SUCURSAL = HS.K_SUCURSAL
        INNER JOIN PARQUEADERO.DIA_SEMANA DS ON HS.K_DIA_SEMANA = DS.K_DIA_SEMANA
        LEFT JOIN (
            SELECT K_SLOT_PARQUEADERO,
                K_SUCURSAL,
                K_RESERVA
            FROM PARQUEADERO.RESERVA
            WHERE ESTA_ACTIVA
        ) R ON SP.K_SLOT_PARQUEADERO = R.K_SLOT_PARQUEADERO
        AND SP.K_SUCURSAL = R.K_SUCURSAL
        AND S.K_SUCURSAL = R.K_SUCURSAL
    WHERE TM.ESTA_ACTIVA
        AND C.NOMBRE_CIUDAD = CIUDAD_P
        AND D.NOMBRE_DIRECCION = DIRECCION_SUCURSAL_P
        AND S.NOMBRE_SUCURSAL = NOMBRE_SUCURSAL_P
        AND SP.TIPO_PARQUEADERO = TIPO_VEHICULO_P
        AND DS.K_DIA_SEMANA = DIA_RESERVA_L
        AND (NOT HS.ES_CERRADO_COMPLETO OR HS.ES_HORARIO_COMPLETO)
        AND (HS.HORA_ABIERTO_SUCURSAL IS NULL OR HS.HORA_ABIERTO_SUCURSAL < HORA_RESERVA_P)
        AND (HS.HORA_CERRADO_SUCURSAL IS NULL OR HS.HORA_CERRADO_SUCURSAL > HORA_RESERVA_P)
    GROUP BY S.K_SUCURSAL,
        SP.K_SLOT_PARQUEADERO
    HAVING (COUNT(DISTINCT SP.K_SLOT_PARQUEADERO) - COUNT(DISTINCT R.K_RESERVA)) > 0
    ORDER BY SP.K_SLOT_PARQUEADERO
    LIMIT 1;
    
    -- Selecciona la PK de la tarjeta que va a usar para pagar
    SELECT T.K_TARJETA_PAGO INTO STRICT K_TARJETA_PAGO_L
    FROM PARQUEADERO.CLIENTE C 
        INNER JOIN PARQUEADERO.TARJETA_PAGO T ON C.K_CLIENTE = T.K_CLIENTE
    WHERE C.K_CLIENTE = K_CLIENTE_L
        AND PARQUEADERO.PGP_SYM_DECRYPT(T.NOMBRE_DUENIO_TARJETA, 'AES_KEY') = NOMBRE_DUENIO_TARJETA_P
        AND PARQUEADERO.PGP_SYM_DECRYPT(T.APELLIDO_DUENIO_TARJETA, 'AES_KEY') = APELLIDO_DUENIO_TARJETA_P
        AND PARQUEADERO.PGP_SYM_DECRYPT(T.ULTIMOS_CUATRO_DIGITOS, 'AES_KEY') = ULTIMOS_CUATRO_DIGITOS_P
        AND PARQUEADERO.PGP_SYM_DECRYPT(T.TIPO_TARJETA, 'AES_KEY') = TIPO_TARJETA_P;
    
    -- Si hay puntos usados recupera la PK de fidelización del cliente
    IF PUNTOS_USADOS_P IS NOT NULL AND PUNTOS_USADOS_P > 0 THEN
        SELECT F.K_FIDELIZACION INTO STRICT K_FIDELIZACION_L
        FROM PARQUEADERO.CLIENTE C
            INNER JOIN PARQUEADERO.FIDELIZACION_CLIENTE F ON C.K_CLIENTE = F.K_CLIENTE
        WHERE F.K_CLIENTE = K_CLIENTE_L
            AND F.FECHA_FIN_PUNTAJE IS NULL
            AND F.ES_ACTUAL;
    END IF;

    -- Inserta los valores de la reserva
    INSERT INTO PARQUEADERO.RESERVA (
        K_CLIENTE,
        K_PROMOCION,
        K_FIDELIZACION,
        K_SUCURSAL,
        K_SLOT_PARQUEADERO,
        K_TARJETA_PAGO,
        FECHA_RESERVA,
        FECHA_INICIO_RESERVA,
        PUNTOS_USADOS,
        ESTA_ACTIVA,
        PLACA_VEHICULO
    ) VALUES (
        K_CLIENTE_L,
        NULL,
        K_FIDELIZACION_L,
        K_SUCURSAL_L,
        K_SLOT_PARQUEADERO_L,
        K_TARJETA_PAGO_L,
        (SELECT CURRENT_TIMESTAMP AT TIME ZONE 'America/Bogota'),
        FECHA_INICIO_RESERVA_L,
        PUNTOS_USADOS_P,
        TRUE,
        PLACA_VEHICULO_L
    );
EXCEPTION
    -- Excepciones
    WHEN NO_DATA_FOUND THEN
        ROLLBACK;
        RAISE EXCEPTION 'No se encontro alguna PK, %/%', SQLSTATE, SQLERRM;
    WHEN TOO_MANY_ROWS THEN
        ROLLBACK;
        RAISE EXCEPTION 'Demasiadas PK devueltas, %/%', SQLSTATE, SQLERRM;
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE EXCEPTION 'CREAR_RESERVA_PR ha ocurrido un error: %/%', SQLSTATE, SQLERRM;
END;
$$;

COMMENT ON PROCEDURE PARQUEADERO.CREAR_RESERVA_PR IS E'Procedimiento para hacer una reserva.';

ALTER PROCEDURE PARQUEADERO.CREAR_RESERVA_PR (
    CHARACTER VARYING,
    CHARACTER VARYING,
    BOOLEAN,
    CHARACTER VARYING,
    CHARACTER VARYING,
    CHARACTER VARYING,
    DATE,
    TIME WITHOUT TIME ZONE,
    CHARACTER VARYING,
    CHARACTER VARYING,
    CHARACTER VARYING,
    CHARACTER VARYING,
    NUMERIC
) OWNER TO PARKUD_DB_ADMIN;


--Procedimiento para modificar las tarifas de una sucursal.
CREATE OR REPLACE PROCEDURE PARQUEADERO.MODIFICAR_TARIFA_SUCURSAL_PR(
    IN NOMBRE_SUCURSAL_P PARQUEADERO.SUCURSAL.NOMBRE_SUCURSAL%TYPE,
    IN CIUDAD_P PARQUEADERO.CIUDAD.NOMBRE_CIUDAD%TYPE,
    IN TIPO_SUCURSAL_P PARQUEADERO.SUCURSAL.TIPO_SUCURSAL%TYPE,
    IN DIRECCION_SUCURSAL_P PARQUEADERO.DIRECCION.NOMBRE_DIRECCION%TYPE,
    IN TARIFA_SUV_P PARQUEADERO.TARIFA_MINUTO.VALOR_MINUTO_SUV%TYPE,
    IN TARIFA_AUTO_P PARQUEADERO.TARIFA_MINUTO.VALOR_MINUTO_AUTO%TYPE,
    IN TARIFA_MOTO_P PARQUEADERO.TARIFA_MINUTO.VALOR_MINUTO_MOTO%TYPE,
    IN INCREMENTO_PARQ_CUBIERTO_P PARQUEADERO.TARIFA_MINUTO.ADICION_PARQ_CUBIERTO%TYPE,
    IN VALOR_MULTA_CANCELACION_P PARQUEADERO.TARIFA_MINUTO.VALOR_MULTA_CANCELACION%TYPE DEFAULT 0
)
LANGUAGE PLPGSQL
AS $$
DECLARE 
    -- Declaración de variables locales
    K_SUCURSAL_L PARQUEADERO.SUCURSAL.K_SUCURSAL%TYPE;
BEGIN
    -- Selecciona la PK de la sucursal a modificar
    SELECT S.K_SUCURSAL INTO STRICT K_SUCURSAL_L
    FROM PARQUEADERO.PAIS P 
        INNER JOIN PARQUEADERO.DEPARTAMENTO DP ON P.K_PAIS = DP.K_PAIS
        INNER JOIN PARQUEADERO.CIUDAD C ON DP.K_DEPARTAMENTO = C.K_DEPARTAMENTO
        INNER JOIN PARQUEADERO.DIRECCION D ON C.K_CIUDAD = D.K_CIUDAD
        INNER JOIN PARQUEADERO.SUCURSAL S ON D.K_DIRECCION = S.K_DIRECCION    
    WHERE S.NOMBRE_SUCURSAL = NOMBRE_SUCURSAL_P
        AND S.TIPO_SUCURSAL = TIPO_SUCURSAL_P
        AND C.NOMBRE_CIUDAD = CIUDAD_P
        AND D.NOMBRE_DIRECCION = DIRECCION_SUCURSAL_P;

    -- Inserta la nueva tarifa en la tabla de la BD
    INSERT INTO PARQUEADERO.TARIFA_MINUTO(
        K_SUCURSAL,
        VALOR_MINUTO_SUV,
        VALOR_MINUTO_AUTO,
        VALOR_MINUTO_MOTO,
        ADICION_PARQ_CUBIERTO,
        VALOR_MULTA_CANCELACION,
        FECHA_INICIO_TARIFA,
        ESTA_ACTIVA
    ) VALUES(
        K_SUCURSAL_L,
        TARIFA_SUV_P,
        TARIFA_AUTO_P,
        TARIFA_MOTO_P,
        INCREMENTO_PARQ_CUBIERTO_P,
        VALOR_MULTA_CANCELACION_P,
        (SELECT CURRENT_TIMESTAMP AT TIME ZONE 'America/Bogota'),
        TRUE
    );
EXCEPTION 
    -- Excepciones
    WHEN NO_DATA_FOUND THEN
        ROLLBACK;
        RAISE EXCEPTION 'Error al recuperar la PK de la sucursal, %/%', SQLSTATE, SQLERRM;
    WHEN TOO_MANY_ROWS THEN
        ROLLBACK;
        RAISE EXCEPTION 'Hay más de una PK devuelta con los valores dados, %/%', SQLSTATE, SQLERRM;
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE EXCEPTION 'MODIFICAR_TARIFA_SUCURSAL_PR ha ocurrido un error: %/%', SQLSTATE, SQLERRM;
END;
$$;

COMMENT ON PROCEDURE PARQUEADERO.MODIFICAR_TARIFA_SUCURSAL_PR IS E'Procedimiento para modificar las tarifas de una sucursal.';

ALTER PROCEDURE PARQUEADERO.MODIFICAR_TARIFA_SUCURSAL_PR (
    CHARACTER VARYING,
    CHARACTER VARYING,
    CHARACTER VARYING,
    CHARACTER VARYING,
    NUMERIC,
    NUMERIC,
    NUMERIC,
    NUMERIC,
    NUMERIC
) OWNER TO PARKUD_DB_ADMIN;

-- Procedimiento para crear una sucursal
-- CREATE OR REPLACE PROCEDURE PARQUEADERO.CREAR_SUCURSAL_PR(
--     IN NOMBRE_CIUDAD_P PARQUEADERO.CIUDAD.NOMBRE_CIUDAD%TYPE,
--     IN NOMBRE_DEPTO_P PARQUEADERO.DEPARTAMENTO.NOMBRE_DEPARTAMENTO%TYPE,
--     IN NOMBRE_DIRECCION_P PARQUEADERO.DIRECCION.NOMBRE_DIRECCION%TYPE,
--     IN EDIFICIO_DIRECCION_P PARQUEADERO.DIRECCION.EDIFICIO_DIRECCION%TYPE,
--     IN CODIGO_POSTAL_P PARQUEADERO.DIRECCION.CODIGO_POSTAL%TYPE,
--     IN NOMBRE_SUCURSAL_P PARQUEADERO.SUCURSAL.NOMBRE_SUCURSAL%TYPE,
--     IN TIPO_SUCURSAL_P PARQUEADERO.SUCURSAL.TIPO_SUCURSAL%TYPE,
--     IN TIEMPO_GRACIA_PREV_P PARQUEADERO.SUCURSAL.TIEMPO_GRACIA_PREVIO%TYPE,
--     IN TIEMPO_GRACIA_POS_P PARQUEADERO.SUCURSAL.TIEMPO_GRACIA_POS%TYPE
-- )
-- LANGUAGE PLPGSQL
-- AS $$
-- DECLARE
--     K_CIUDAD_L PARQUEADERO.CIUDAD.K_CIUDAD%TYPE;
--     K_SUCURSAL_L PARQUEADERO.SUCURSAL.K_SUCURSAL%TYPE;
-- BEGIN
--     -- Selecciona la clave primaria de la ciudad escogida
--     SELECT C.K_CIUDAD INTO STRICT K_CIUDAD_L
--     FROM PARQUEADERO.CIUDAD C
--         INNER JOIN PARQUEADERO.DEPARTAMENTO D ON C.K_DEPARTAMENTO = D.K_DEPARTAMENTO
--         INNER JOIN PARQUEADERO.PAIS P ON P.K_PAIS = D.K_PAIS
--     WHERE C.NOMBRE_CIUDAD = NOMBRE_CIUDAD_P
--         AND D.NOMBRE_DEPARTAMENTO = NOMBRE_DEPTO_P;
    
--     -- Crea la sucursal en la tabla Sucursal de la BD
--     INSERT INTO PARQUEADERO.SUCURSAL (
--             NOMBRE_SUCURSAL,
--             TIPO_SUCURSAL,
--             TIEMPO_GRACIA_PREVIO,
--             TIEMPO_GRACIA_POS
--         )
--     VALUES (
--             NOMBRE_SUCURSAL_P,
--             TIPO_SUCURSAL_P,
--             TIEMPO_GRACIA_PREV_P,
--             TIEMPO_GRACIA_POS_P
--         )
--     RETURNING K_SUCURSAL INTO K_SUCURSAL_L;
    
--     -- Crea la dirección de la sucursal en la tabla Dirección de la BD
--     INSERT INTO PARQUEADERO.DIRECCION (
--             K_CIUDAD,
--             K_SUCURSAL,
--             NOMBRE_DIRECCION,
--             EDIFICIO_DIRECCION,
--             CODIGO_POSTAL
--         )
--     VALUES (
--             K_CIUDAD_L,
--             K_SUCURSAL_L,
--             NOMBRE_DIRECCION_P,
--             EDIFICIO_DIRECCION_P,
--             CODIGO_POSTAL_P
--         );
-- EXCEPTION
--     -- Excepciones
--     WHEN OTHERS THEN
--         ROLLBACK;
--         RAISE EXCEPTION 'CREAR_SUCURSAL_PR ha ocurrido un error: %/%', SQLSTATE, SQLERRM;
-- END;
-- $$;

-- COMMENT ON PROCEDURE PARQUEADERO.CREAR_SUCURSAL_PR IS E'Procedimiento para ingresar una sucursal nueva en la BD.';

-- ALTER PROCEDURE PARQUEADERO.CREAR_SUCURSAL_PR(
--     CHARACTER VARYING,
--     CHARACTER VARYING,
--     CHARACTER VARYING,
--     CHARACTER VARYING,
--     CHARACTER VARYING,
--     CHARACTER VARYING,
--     CHARACTER VARYING,
--     NUMERIC,
--     NUMERIC
-- ) OWNER TO PARKUD_DB_ADMIN;

-- Procedimiento para agregar el horario de una sucursal
-- CREATE OR REPLACE PROCEDURE PARQUEADERO.CREAR_HORARIO_SUCURSAL_PR(
--     IN DIA_SMEANA_P PARQUEADERO.DIA_SEMANA.K_DIA_SEMANA%TYPE,
        
-- )
-- LANGUAGE PLPGSQL
-- AS $$
-- DECLARE
--     K_CIUDAD_L PARQUEADERO.CIUDAD.K_CIUDAD%TYPE;
--     K_SUCURSAL_L PARQUEADERO.SUCURSAL.K_SUCURSAL%TYPE;
-- BEGIN
