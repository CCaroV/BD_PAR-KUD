-- Procedimiento de auditoría para los usuarios que inician sesión en la BD.
CREATE OR REPLACE PROCEDURE AUDITORIA.AUDIT_INGRESO_USUARIO_PR()
LANGUAGE PLPGSQL
AS $$
DECLARE
    -- Declaración de variables locales
    ROL_USUARIO_L VARCHAR;
BEGIN
    -- Selecciona el rol del usuario que ingresó
    SELECT LOWER(TRIM(G.ROLNAME)) INTO STRICT ROL_USUARIO_L
    FROM PG_ROLES R
        JOIN PG_AUTH_MEMBERS M ON R.OID = M.MEMBER
        JOIN PG_ROLES G ON M.ROLEID = G.OID
    WHERE R.ROLNAME = CURRENT_USER;

    -- Si es un cliente
    IF ROL_USUARIO_L = LOWER(TRIM('USER_ROLE')) THEN
        INSERT INTO AUDITORIA.AUDIT_USUARIO (
            K_EMPLEADO,
            K_CLIENTE,
            NOMBRE_USUARIO,
            DIRECCION_IP,
            FECHA_AUDIT_USUARIO
        )
        VALUES (
            NULL,
            (SELECT K_CLIENTE FROM PARQUEADERO.CLIENTE WHERE PARQUEADERO.PGP_SYM_DECRYPT(CORREO_CLIENTE, 'AES_KEY') = CURRENT_USER),
            (SELECT USER),
            (SELECT INET_CLIENT_ADDR()),
            (SELECT CURRENT_TIMESTAMP AT TIME ZONE 'America/Bogota')
        );

    -- Si es un operador, administrador o súper administrador
    ELSIF ROL_USUARIO_L = LOWER(TRIM('OPERADOR_ROLE'))
            OR ROL_USUARIO_L = LOWER(TRIM('ADMIN_ROLE'))
            OR ROL_USUARIO_L = LOWER(TRIM('SUPER_ADMIN_ROLE')) THEN
        INSERT INTO AUDITORIA.AUDIT_USUARIO (
            K_EMPLEADO,
            K_CLIENTE,
            NOMBRE_USUARIO,
            DIRECCION_IP,
            FECHA_AUDIT_USUARIO
        )
        VALUES (
            (SELECT K_EMPLEADO FROM PARQUEADERO.EMPLEADO WHERE PARQUEADERO.PGP_SYM_DECRYPT(CORREO_EMPLEADO, 'AES_KEY') = CURRENT_USER),
            NULL,
            (SELECT USER),
            (SELECT INET_CLIENT_ADDR()),
            (SELECT CURRENT_TIMESTAMP AT TIME ZONE 'America/Bogota')
        );
    END IF;
EXCEPTION
    -- Excepciones
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE EXCEPTION 'AUDIT_INGRESO_USUARIO_PR ha ocurrido un error: %/%', SQLSTATE, SQLERRM;
END;
$$;

COMMENT ON PROCEDURE AUDITORIA.AUDIT_INGRESO_USUARIO_PR IS E'Procedimiento de auditoría para los usuarios que inician sesión en la BD.';

ALTER PROCEDURE AUDITORIA.AUDIT_INGRESO_USUARIO_PR() OWNER TO PARKUD_DB_ADMIN;

-- Procedimiento para insertar un vehículo
CREATE OR REPLACE PROCEDURE PARQUEADERO.AGREGAR_VEHICULO_PR(
    IN TIPO_VEHICULO_P PARQUEADERO.VEHICULO.TIPO_VEHICULO%TYPE,
    IN PLACA_P PARQUEADERO.VEHICULO.PLACA_VEHICULO%TYPE,
    IN NOMBRE_1_P PARQUEADERO.VEHICULO.NOMBRE1_PROPIETARIO%TYPE,
    IN NOMBRE_2_P PARQUEADERO.VEHICULO.NOMBRE2_PROPIETARIO%TYPE,
    IN APELLIDO_1_P PARQUEADERO.VEHICULO.APELLIDO1_PROPIETARIO%TYPE,
    IN APELLIDO_2_P PARQUEADERO.VEHICULO.APELLIDO2_PROPIETARIO%TYPE,
    IN MARCA_VEHICULO_P PARQUEADERO.VEHICULO.K_MARCA_VEHICULO%TYPE,
    IN COLOR_VEHICULO_P PARQUEADERO.VEHICULO.COLOR_VEHICULO%TYPE
)
LANGUAGE PLPGSQL
AS $$
DECLARE
    -- Declaración de variables locales
    K_CLIENTE_L PARQUEADERO.CLIENTE.K_CLIENTE%TYPE;
BEGIN
    -- Recupera la clave primaria del cliente conectado a la BD
    SELECT K_CLIENTE INTO STRICT K_CLIENTE_L
    FROM PARQUEADERO.CLIENTE
    WHERE PARQUEADERO.PGP_SYM_DECRYPT(CORREO_CLIENTE, 'AES_KEY') = CURRENT_USER;
    
    -- Inserta el vehículo en la tabla de vehículos de la BD
    INSERT INTO PARQUEADERO.VEHICULO(
        K_MARCA_VEHICULO,
        K_CLIENTE,
        PLACA_VEHICULO,
        NOMBRE1_PROPIETARIO,
        NOMBRE2_PROPIETARIO,
        APELLIDO1_PROPIETARIO,
        APELLIDO2_PROPIETARIO,
        TIPO_VEHICULO,
        COLOR_VEHICULO
    )
    VALUES (
        MARCA_VEHICULO_P,
        K_CLIENTE_L,
        PLACA_P,
        NOMBRE_1_P,
        NOMBRE_2_P,
        APELLIDO_1_P,
        APELLIDO_2_P,
        TIPO_VEHICULO_P,
        COLOR_VEHICULO_P
    );
EXCEPTION
    -- Excepciones
    WHEN NO_DATA_FOUND THEN
        ROLLBACK;
        RAISE EXCEPTION 'El usuario actual no está registrado como cliente, %/%', SQLSTATE, SQLERRM;
    WHEN TOO_MANY_ROWS THEN
        ROLLBACK;
        RAISE EXCEPTION 'Hay inconsistencias en la BD, tabla cliente: hay un correo repetido, %/%', SQLSTATE, SQLERRM;
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE EXCEPTION 'AGREGAR_VEHICULO_PR ha ocurrido un error: %/%', SQLSTATE, SQLERRM;
END;
$$;

COMMENT ON PROCEDURE PARQUEADERO.AGREGAR_VEHICULO_PR IS E'Procedimiento para insertar un vehículo.';

ALTER PROCEDURE PARQUEADERO.AGREGAR_VEHICULO_PR(
    IN CHARACTER VARYING,
    IN CHARACTER VARYING,
    IN CHARACTER VARYING,
    IN CHARACTER VARYING,
    IN CHARACTER VARYING,
    IN CHARACTER VARYING,
    IN CHARACTER VARYING,
    IN CHARACTER VARYING
) OWNER TO PARKUD_DB_ADMIN;

-- Procedimiento para insertar un método de pago.
CREATE OR REPLACE PROCEDURE PARQUEADERO.INSERTAR_METODO_PAGO_PR(
    IN NOMBRE_DUENIO_TARJETA_P VARCHAR,
    IN APELLIDO_DUENIO_TARJETA_P VARCHAR,
    IN NUMERO_TARJETA_P VARCHAR,
    IN ULTIMOS_CUATRO_DIGITOS_P VARCHAR,
    IN MES_VENCIMIENTO_P NUMERIC(2),
    IN ANIO_VENCIMIENTO_P NUMERIC(4),
    IN TIPO_TARJETA_P VARCHAR
)
LANGUAGE PLPGSQL
AS $$
DECLARE 
    -- Declaración de variables locales
    K_CLIENTE_L PARQUEADERO.CLIENTE.K_CLIENTE%TYPE;
BEGIN
    -- Recupera la clave primaria del cliente conectado a la BD
    SELECT K_CLIENTE INTO STRICT K_CLIENTE_L
    FROM PARQUEADERO.CLIENTE
    WHERE PARQUEADERO.PGP_SYM_DECRYPT(CORREO_CLIENTE, 'AES_KEY') = CURRENT_USER;

    -- Inserta la información de método de pago
    INSERT INTO PARQUEADERO.TARJETA_PAGO (
        K_CLIENTE,
        NOMBRE_DUENIO_TARJETA,
        APELLIDO_DUENIO_TARJETA,
        NUMERO_TARJETA,
        ULTIMOS_CUATRO_DIGITOS,
        MES_VENCIMIENTO,
        ANIO_VENCIMIENTO,
        TIPO_TARJETA
    ) VALUES (
        K_CLIENTE_L,
        (SELECT PARQUEADERO.PGP_SYM_ENCRYPT(NOMBRE_DUENIO_TARJETA_P::VARCHAR, 'AES_KEY'::VARCHAR)),
        (SELECT PARQUEADERO.PGP_SYM_ENCRYPT(APELLIDO_DUENIO_TARJETA_P::VARCHAR, 'AES_KEY'::VARCHAR)),
        (SELECT PARQUEADERO.PGP_SYM_ENCRYPT(NUMERO_TARJETA_P::VARCHAR, 'AES_KEY'::VARCHAR)),
        (SELECT PARQUEADERO.PGP_SYM_ENCRYPT(ULTIMOS_CUATRO_DIGITOS_P::VARCHAR, 'AES_KEY'::VARCHAR)),
        (SELECT PARQUEADERO.PGP_SYM_ENCRYPT(MES_VENCIMIENTO_P::VARCHAR, 'AES_KEY'::VARCHAR)),
        (SELECT PARQUEADERO.PGP_SYM_ENCRYPT(ANIO_VENCIMIENTO_P::VARCHAR, 'AES_KEY'::VARCHAR)),
        (SELECT PARQUEADERO.PGP_SYM_ENCRYPT(TIPO_TARJETA_P::VARCHAR, 'AES_KEY'::VARCHAR))
    );
EXCEPTION
    -- Excepciones
    WHEN NO_DATA_FOUND THEN
        ROLLBACK;
        RAISE EXCEPTION 'El usuario actual no está registrado como cliente, %/%', SQLSTATE, SQLERRM;
    WHEN TOO_MANY_ROWS THEN
        ROLLBACK;
        RAISE EXCEPTION 'Hay inconsistencias en la BD, tabla cliente: hay un correo repetido, %/%', SQLSTATE, SQLERRM;
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE EXCEPTION 'INSERTAR_METODO_PAGO_PR ha ocurrido un error: %/%', SQLSTATE, SQLERRM;
END;
$$;

COMMENT ON PROCEDURE PARQUEADERO.AGREGAR_VEHICULO_PR IS E'Procedimiento para insertar un método de pago.';

ALTER PROCEDURE PARQUEADERO.INSERTAR_METODO_PAGO_PR ( 
    CHARACTER VARYING, 
    CHARACTER VARYING, 
    CHARACTER VARYING, 
    CHARACTER VARYING, 
    NUMERIC, 
    NUMERIC, 
    CHARACTER VARYING
) OWNER TO PARKUD_DB_ADMIN;

-- Procedimiento para hacer el primer cambio de clave de un usuario (cliente).
CREATE OR REPLACE PROCEDURE PARQUEADERO.PRIMER_CAMBIO_CLAVE_PR(
    IN NOMBRE_USUARIO_P TEXT, 
    IN CLAVE_NUEVA_P TEXT)
LANGUAGE PLPGSQL
AS $$
DECLARE
    -- Declaración de variables locales
    FECHA_VALIDEZ_L CONSTANT DATE := '2050-01-01';
    FECHA_ACTUAL_L PG_USER.VALUNTIL%TYPE;
BEGIN
    -- Toma la fecha de validación de la clave actual del usuario de la BD.
    SELECT VALUNTIL INTO FECHA_ACTUAL_L
    FROM PG_USER
    WHERE VALUNTIL IS NOT NULL 
        AND PG_USER.USENAME = NOMBRE_USUARIO_P;

    -- Si la fecha de validación no ha sido modificada, hace el cambio de clave.
    -- Si la fecha de validación ha sido modificada, este no es el primer cambio de clave del usuario.
    IF FECHA_ACTUAL_L::TIMESTAMP != FECHA_VALIDEZ_L::TIMESTAMP THEN
        EXECUTE FORMAT('ALTER USER %I WITH PASSWORD %L ', NOMBRE_USUARIO_P, CLAVE_NUEVA_P);
        EXECUTE FORMAT('ALTER USER %I VALID UNTIL %L', NOMBRE_USUARIO_P, FECHA_VALIDEZ_L);
    ELSE 
        ROLLBACK;
        RAISE EXCEPTION 'El usuario ingresado ya ha hecho su primer cambio de clave.';
    END IF;
EXCEPTION
    -- Excepciones
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE EXCEPTION 'PRIMER_CAMBIO_CLAVE_PR ha ocurrido un error: %/%', SQLSTATE, SQLERRM;
END;
$$;

COMMENT ON PROCEDURE PARQUEADERO.PRIMER_CAMBIO_CLAVE_PR IS E'Procedimiento para hacer el primer cambio de clave de un usuario.';

ALTER PROCEDURE PARQUEADERO.PRIMER_CAMBIO_CLAVE_PR(
    IN TEXT, 
    IN TEXT
) OWNER TO PARKUD_DB_ADMIN;

GRANT EXECUTE ON PROCEDURE PARQUEADERO.PRIMER_CAMBIO_CLAVE_PR TO MANAGE_ACCOUNT_USER;

-- Procedimiento para crear una sucursal
-- CREATE OR REPLACE PROCEDURE PARQUEADERO.CREAR_SUCURSAL_PR(
--     IN NOMBRE_CIUDAD_P PARQUEADERO.CIUDAD.NOMBRE_CIUDAD%TYPE,
--     IN NOMBRE_DEPTO_P PARQUEADERO.DEPARTAMENTO.NOMBRE_DEPARTAMENTO%TYPE,
--     IN NOMBRE_DIRECCION_P PARQUEADERO.DIRECCION.NOMBRE_DIRECCION%TYPE,
--     IN EDIFICIO_DIRECCION_P PARQUEADERO.DIRECCION.EDIFICIO_DIRECCION%TYPE,
--     IN CODIGO_POSTAL_P PARQUEADERO.DIRECCION.CODIGO_POSTAL%TYPE,
--     IN NOMBRE_SUCURSAL_P PARQUEADERO.SUCURSAL.NOMBRE_SUCURSAL%TYPE,
--     IN TIPO_SUCURSAL_P PARQUEADERO.SUCURSAL.TIPO_SUCURSAL%TYPE,
--     IN TIEMPO_GRACIA_PREV_P PARQUEADERO.SUCURSAL.TIEMPO_GRACIA_PREVIO%TYPE,
--     IN TIEMPO_GRACIA_POS_P PARQUEADERO.SUCURSAL.TIEMPO_GRACIA_POS%TYPE
-- )
-- LANGUAGE PLPGSQL
-- AS $$
-- DECLARE
--     K_CIUDAD_L PARQUEADERO.CIUDAD.K_CIUDAD%TYPE;
--     K_SUCURSAL_L PARQUEADERO.SUCURSAL.K_SUCURSAL%TYPE;
-- BEGIN
--     -- Selecciona la clave primaria de la ciudad escogida
--     SELECT C.K_CIUDAD INTO STRICT K_CIUDAD_L
--     FROM PARQUEADERO.CIUDAD C
--         INNER JOIN PARQUEADERO.DEPARTAMENTO D ON C.K_DEPARTAMENTO = D.K_DEPARTAMENTO
--         INNER JOIN PARQUEADERO.PAIS P ON P.K_PAIS = D.K_PAIS
--     WHERE C.NOMBRE_CIUDAD = NOMBRE_CIUDAD_P
--         AND D.NOMBRE_DEPARTAMENTO = NOMBRE_DEPTO_P;
    
--     -- Crea la sucursal en la tabla Sucursal de la BD
--     INSERT INTO PARQUEADERO.SUCURSAL (
--             NOMBRE_SUCURSAL,
--             TIPO_SUCURSAL,
--             TIEMPO_GRACIA_PREVIO,
--             TIEMPO_GRACIA_POS
--         )
--     VALUES (
--             NOMBRE_SUCURSAL_P,
--             TIPO_SUCURSAL_P,
--             TIEMPO_GRACIA_PREV_P,
--             TIEMPO_GRACIA_POS_P
--         )
--     RETURNING K_SUCURSAL INTO K_SUCURSAL_L;
    
--     -- Crea la dirección de la sucursal en la tabla Dirección de la BD
--     INSERT INTO PARQUEADERO.DIRECCION (
--             K_CIUDAD,
--             K_SUCURSAL,
--             NOMBRE_DIRECCION,
--             EDIFICIO_DIRECCION,
--             CODIGO_POSTAL
--         )
--     VALUES (
--             K_CIUDAD_L,
--             K_SUCURSAL_L,
--             NOMBRE_DIRECCION_P,
--             EDIFICIO_DIRECCION_P,
--             CODIGO_POSTAL_P
--         );
-- EXCEPTION
--     -- Excepciones
--     WHEN OTHERS THEN
--         ROLLBACK;
--         RAISE EXCEPTION 'CREAR_SUCURSAL_PR ha ocurrido un error: %/%', SQLSTATE, SQLERRM;
-- END;
-- $$;

-- COMMENT ON PROCEDURE PARQUEADERO.CREAR_SUCURSAL_PR IS E'Procedimiento para ingresar una sucursal nueva en la BD.';

-- ALTER PROCEDURE PARQUEADERO.CREAR_SUCURSAL_PR(
--     CHARACTER VARYING,
--     CHARACTER VARYING,
--     CHARACTER VARYING,
--     CHARACTER VARYING,
--     CHARACTER VARYING,
--     CHARACTER VARYING,
--     CHARACTER VARYING,
--     NUMERIC,
--     NUMERIC
-- ) OWNER TO PARKUD_DB_ADMIN;

-- Procedimiento para agregar el horario de una sucursal
-- CREATE OR REPLACE PROCEDURE PARQUEADERO.CREAR_HORARIO_SUCURSAL_PR(
--     IN DIA_SMEANA_P PARQUEADERO.DIA_SEMANA.K_DIA_SEMANA%TYPE,
        
-- )
-- LANGUAGE PLPGSQL
-- AS $$
-- DECLARE
--     K_CIUDAD_L PARQUEADERO.CIUDAD.K_CIUDAD%TYPE;
--     K_SUCURSAL_L PARQUEADERO.SUCURSAL.K_SUCURSAL%TYPE;
-- BEGIN